// <auto-generated />
using System;
using BrainFlow.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrainFlow.Repository.Migrations
{
    [DbContext(typeof(BrainFlowContext))]
    [Migration("20251008171048_RenameAndAddAulaAnexo")]
    partial class RenameAndAddAulaAnexo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BrainFlow.Data.Models.AfiliadoMOD", b =>
                {
                    b.Property<int>("CdAfiliado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_AFILIADO")
                        .HasComment("Código único do afiliado. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdAfiliado"));

                    b.Property<int>("CdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("CD_USUARIO")
                        .HasComment("FK para a tabela USUARIO.");

                    b.Property<DateTime?>("DtAprovacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_APROVACAO")
                        .HasComment("Data em que a afiliação foi aprovada.");

                    b.Property<DateTime>("DtSolicitacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_SOLICITACAO")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data em que o usuário solicitou a afiliação.");

                    b.Property<string>("NoInstitucional")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NO_INSTITUCIONAL")
                        .HasComment("Nome da instituição ou empresa do afiliado, se aplicável.");

                    b.Property<string>("NrCpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("NR_CPF")
                        .HasComment("CPF do afiliado, para fins de pagamento e fiscais.");

                    b.Property<bool>("SnAprovado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("SN_APROVADO")
                        .HasComment("Flag que indica se a solicitação de afiliação foi aprovada (1) pelo admin.");

                    b.Property<bool>("SnAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("SN_ATIVO")
                        .HasComment("Flag que indica se o afiliado está ativo (1) ou inativo (0).");

                    b.HasKey("CdAfiliado");

                    b.HasIndex("CdUsuario");

                    b.ToTable("afiliados", null, t =>
                        {
                            t.HasComment("Armazena dados específicos dos usuários que são afiliados (instrutores).");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AfiliadoPaginaMOD", b =>
                {
                    b.Property<int>("CdPagina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_PAGINA")
                        .HasComment("Código único da página. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdPagina"));

                    b.Property<int>("CdAfiliado")
                        .HasColumnType("int")
                        .HasColumnName("CD_AFILIADO")
                        .HasComment("FK para a tabela AFILIADO.");

                    b.Property<string>("TxCaminhoBanner")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TX_CAMINHO_BANNER")
                        .HasComment("Caminho para a imagem do banner da página.");

                    b.Property<string>("TxCaminhoLogo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TX_CAMINHO_LOGO")
                        .HasComment("Caminho para a imagem do logo do afiliado.");

                    b.Property<string>("TxLinkPagina")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TX_LINK_PAGINA")
                        .HasComment("URL amigável da página (ex: /afiliado/nome-do-afiliado).");

                    b.Property<string>("TxTitulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TX_TITULO")
                        .HasComment("Título principal exibido na página do afiliado.");

                    b.Property<string>("TxUrlInstagram")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TX_URL_INSTAGRAM")
                        .HasComment("URL para o perfil do Instagram do afiliado.");

                    b.Property<string>("TxUrlLinkedin")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TX_URL_LINKEDIN")
                        .HasComment("URL para o perfil do LinkedIn do afiliado.");

                    b.Property<string>("TxUrlYoutube")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TX_URL_YOUTUBE")
                        .HasComment("URL para o canal do YouTube do afiliado.");

                    b.HasKey("CdPagina");

                    b.HasIndex("CdAfiliado");

                    b.ToTable("AFILIADO_PAGINA", null, t =>
                        {
                            t.HasComment("Armazena as informações da página pública personalizável de cada afiliado.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AulaAnexoMOD", b =>
                {
                    b.Property<int>("CdAulaAnexo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_AULA_ANEXO")
                        .HasComment("Chave primária do anexo. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdAulaAnexo"));

                    b.Property<int>("CdAula")
                        .HasColumnType("int")
                        .HasColumnName("CD_AULA")
                        .HasComment("FK para a tabela AULA.");

                    b.Property<DateTime>("DtUpload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_UPLOAD")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data/hora do upload.");

                    b.Property<string>("NoArquivoOriginal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NO_ARQUIVO_ORIGINAL")
                        .HasComment("Nome original do arquivo enviado.");

                    b.Property<string>("TxCaminhoArquivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TX_CAMINHO_ARQUIVO")
                        .HasComment("Caminho onde o arquivo foi armazenado.");

                    b.HasKey("CdAulaAnexo");

                    b.HasIndex("CdAula");

                    b.ToTable("AULA_ANEXO", null, t =>
                        {
                            t.HasComment("Armazena anexos (materiais) associados a uma aula.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AulaMOD", b =>
                {
                    b.Property<int>("CdAula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_AULA")
                        .HasComment("Código único da aula. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdAula"));

                    b.Property<int>("CdModulo")
                        .HasColumnType("int")
                        .HasColumnName("CD_MODULO")
                        .HasComment("FK para a tabela MODULO.");

                    b.Property<DateTime?>("DtAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_ALTERACAO")
                        .HasComment("Data da última alteração da aula.");

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_CADASTRO")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data de criação do registro da aula.");

                    b.Property<string>("NoAula")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NO_AULA")
                        .HasComment("Nome da aula (Ex: \"Variáveis e Tipos de Dados\").");

                    b.Property<int>("NrOrdem")
                        .HasColumnType("int")
                        .HasColumnName("NR_ORDEM")
                        .HasComment("Número que define a ordem de exibição das aulas dentro de um módulo.");

                    b.Property<bool>("SnAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("SN_ATIVO")
                        .HasComment("Flag que indica se a aula está ativa (1) ou inativa (0).");

                    b.Property<bool>("SnAulaGratuita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("SN_AULA_GRATUITA")
                        .HasComment("Flag que indica se a aula pode ser visualizada gratuitamente (1) por não-alunos.");

                    b.Property<string>("TxCaminhoVideo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TX_CAMINHO_VIDEO")
                        .HasComment("URL ou caminho para o arquivo de vídeo da aula.");

                    b.Property<string>("TxConteudo")
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("TX_CONTEUDO")
                        .HasComment("Conteúdo textual complementar da aula (ex: código, links).");

                    b.Property<string>("TxDescricao")
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("TX_DESCRICAO")
                        .HasComment("Descrição do conteúdo abordado na aula.");

                    b.HasKey("CdAula");

                    b.HasIndex("CdModulo");

                    b.ToTable("aulas", null, t =>
                        {
                            t.HasComment("Armazena os dados de cada aula individualmente.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.BankflowTransacaoMOD", b =>
                {
                    b.Property<int>("CdTransacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_TRANSACAO")
                        .HasComment("Código único da transação. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdTransacao"));

                    b.Property<int>("CdPedido")
                        .HasColumnType("int")
                        .HasColumnName("CD_PEDIDO")
                        .HasComment("FK para a tabela PEDIDO.");

                    b.Property<int>("CdTipoTransacao")
                        .HasColumnType("int")
                        .HasColumnName("CD_TIPO_TRANSACAO")
                        .HasComment("FK para a tabela BANKFLOW_TRANSACAO_TIPO.");

                    b.Property<decimal>("DcValorTransacao")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DC_VALOR_TRANSACAO")
                        .HasComment("Valor efetivamente transacionado.");

                    b.Property<DateTime>("DtTransacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_TRANSACAO")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data e hora em que a transação ocorreu.");

                    b.Property<string>("TxTokenGateway")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TX_TOKEN_GATEWAY")
                        .HasComment("Código ou token de identificação da transação no gateway de pagamento (ex: PayPal).");

                    b.HasKey("CdTransacao");

                    b.HasIndex("CdPedido");

                    b.HasIndex("CdTipoTransacao");

                    b.ToTable("BANKFLOW_TRANSACAO", null, t =>
                        {
                            t.HasComment("Registra as transações financeiras com o gateway de pagamento.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.BankflowTransacaoTipoMOD", b =>
                {
                    b.Property<int>("CdTipoTransacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_TIPO_TRANSACAO")
                        .HasComment("Código único do tipo de transação. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdTipoTransacao"));

                    b.Property<string>("NoTipoTransacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NO_TIPO_TRANSACAO")
                        .HasComment("Nome do tipo de transação.");

                    b.HasKey("CdTipoTransacao");

                    b.ToTable("BANKFLOW_TRANSACAO_TIPO", null, t =>
                        {
                            t.HasComment("Tabela de domínio para os tipos de transação (ex: Cartão de Crédito, PIX).");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.ComissaoMOD", b =>
                {
                    b.Property<int>("CdComissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_COMISSAO")
                        .HasComment("Código único da comissão. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdComissao"));

                    b.Property<int>("CdAfiliado")
                        .HasColumnType("int")
                        .HasColumnName("CD_AFILIADO")
                        .HasComment("FK para a tabela AFILIADO, que receberá a comissão.");

                    b.Property<int>("CdPedidoItem")
                        .HasColumnType("int")
                        .HasColumnName("CD_PEDIDO_ITEM")
                        .HasComment("FK para a tabela PEDIDO_ITEM, que originou a comissão.");

                    b.Property<decimal>("DcComissaoAfiliado")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DC_COMISSAO_AFILIADO")
                        .HasComment("Valor da comissão a ser paga ao afiliado.");

                    b.Property<decimal>("DcComissaoPlataforma")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DC_COMISSAO_PLATAFORMA")
                        .HasComment("Valor da comissão retido pela plataforma.");

                    b.Property<decimal>("DcValorBrutoVenda")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DC_VALOR_BRUTO_VENDA")
                        .HasComment("Valor total da venda do item.");

                    b.Property<DateTime>("DtCalculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_CALCULO")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data em que a comissão foi calculada e registrada.");

                    b.Property<DateTime?>("DtRepasse")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_REPASSE")
                        .HasComment("Data em que o repasse foi efetuado.");

                    b.Property<bool>("SnRepassado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("SN_REPASSADO")
                        .HasComment("Flag que indica se a comissão já foi repassada (1) ao afiliado.");

                    b.HasKey("CdComissao");

                    b.HasIndex("CdAfiliado");

                    b.HasIndex("CdPedidoItem");

                    b.ToTable("comissoes", null, t =>
                        {
                            t.HasComment("Registra o cálculo e o status das comissões geradas por venda.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.CursoMOD", b =>
                {
                    b.Property<int>("CdCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_CURSO")
                        .HasComment("Código único do curso. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdCurso"));

                    b.Property<int>("CdAfiliado")
                        .HasColumnType("int");

                    b.Property<decimal>("DcValor")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DC_VALOR")
                        .HasComment("Valor de venda do curso. 0 para cursos gratuitos.");

                    b.Property<DateTime?>("DtAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_ALTERACAO")
                        .HasComment("Data da última alteração do curso.");

                    b.Property<DateTime?>("DtAvaliacaoAdmin")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_AVALIACAO_ADMIN")
                        .HasComment("Data em que o admin avaliou o curso.");

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_CADASTRO")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data de criação do registro do curso.");

                    b.Property<string>("NoCurso")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NO_CURSO")
                        .HasComment("Nome do curso.");

                    b.Property<bool>("SnAprovado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("SN_APROVADO")
                        .HasComment("Flag que indica se o curso foi aprovado (1) pelo admin para publicação.");

                    b.Property<bool>("SnAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("SN_ATIVO")
                        .HasComment("Flag que indica se o curso está ativo (1) ou inativo (0).");

                    b.Property<string>("TxCaminhoImagem")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TX_CAMINHO_IMAGEM")
                        .HasComment("Caminho para a imagem de capa do curso.");

                    b.Property<string>("TxDescricao")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("TX_DESCRICAO")
                        .HasComment("Descrição completa e detalhada do curso.");

                    b.HasKey("CdCurso");

                    b.HasIndex("CdAfiliado");

                    b.ToTable("cursos", null, t =>
                        {
                            t.HasComment("Armazena os dados dos cursos criados pelos afiliados.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.ModuloMOD", b =>
                {
                    b.Property<int>("CdModulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_MODULO")
                        .HasComment("Código único do módulo. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdModulo"));

                    b.Property<int>("CdCurso")
                        .HasColumnType("int")
                        .HasColumnName("CD_CURSO")
                        .HasComment("FK para a tabela CURSO, indicando a qual curso o módulo pertence.");

                    b.Property<DateTime?>("DtAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_ALTERACAO")
                        .HasComment("Data da última alteração do módulo.");

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_CADASTRO")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data de criação do registro do módulo.");

                    b.Property<string>("NoModulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NO_MODULO")
                        .HasComment("Nome do módulo (Ex: \"Introdução ao C#\").");

                    b.Property<int>("NrOrdem")
                        .HasColumnType("int")
                        .HasColumnName("NR_ORDEM")
                        .HasComment("Número que define a ordem de exibição dos módulos.");

                    b.Property<bool>("SnAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("SN_ATIVO")
                        .HasComment("Flag que indica se o módulo está ativo (1) ou inativo (0).");

                    b.Property<string>("TxDescricao")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("TX_DESCRICAO")
                        .HasComment("Breve descrição sobre o conteúdo do módulo.");

                    b.HasKey("CdModulo");

                    b.HasIndex("CdCurso");

                    b.ToTable("modulos", null, t =>
                        {
                            t.HasComment("Organiza o conteúdo de um curso em módulos ou seções.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.PedidoItemMOD", b =>
                {
                    b.Property<int>("CdPedidoItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_PEDIDO_ITEM")
                        .HasComment("Código único do item do pedido. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdPedidoItem"));

                    b.Property<int>("CdCurso")
                        .HasColumnType("int")
                        .HasColumnName("CD_CURSO")
                        .HasComment("FK para a tabela CURSO, indicando o curso comprado.");

                    b.Property<int>("CdPedido")
                        .HasColumnType("int")
                        .HasColumnName("CD_PEDIDO")
                        .HasComment("FK para a tabela PEDIDO.");

                    b.Property<decimal>("DcValorItem")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DC_VALOR_ITEM")
                        .HasComment("Valor do curso no momento da compra.");

                    b.HasKey("CdPedidoItem");

                    b.HasIndex("CdCurso");

                    b.HasIndex("CdPedido");

                    b.ToTable("PEDIDO_ITEM", null, t =>
                        {
                            t.HasComment("Armazena os itens (cursos) de um pedido.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.PedidoMOD", b =>
                {
                    b.Property<int>("CdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_PEDIDO")
                        .HasComment("Código único do pedido. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdPedido"));

                    b.Property<int>("CdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("CD_USUARIO")
                        .HasComment("FK para a tabela USUARIO, indicando o comprador.");

                    b.Property<decimal>("DcValorTotal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DC_VALOR_TOTAL")
                        .HasComment("Soma total dos valores dos itens do pedido.");

                    b.Property<DateTime?>("DtFinalizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_FINALIZACAO")
                        .HasComment("Data em que o pedido foi finalizado.");

                    b.Property<DateTime>("DtPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_PEDIDO")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data em que o pedido foi criado.");

                    b.Property<bool>("SnFinalizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("SN_FINALIZADO")
                        .HasComment("Flag que indica se o pedido foi finalizado (1) (pagamento confirmado).");

                    b.HasKey("CdPedido");

                    b.HasIndex("CdUsuario");

                    b.ToTable("PEDIDO", null, t =>
                        {
                            t.HasComment("Armazena os cabeçalhos dos pedidos de compra de cursos.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioAulaMOD", b =>
                {
                    b.Property<int>("CdUsuarioAula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_USUARIO_AULA")
                        .HasComment("Código único do registro de progresso. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdUsuarioAula"));

                    b.Property<int>("CdAula")
                        .HasColumnType("int")
                        .HasColumnName("CD_AULA")
                        .HasComment("FK para a tabela AULA.");

                    b.Property<int>("CdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("CD_USUARIO")
                        .HasComment("FK para a tabela USUARIO.");

                    b.Property<DateTime?>("DtConclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_CONCLUSAO")
                        .HasComment("Data em que o usuário marcou a aula como concluída.");

                    b.Property<bool>("SnConcluida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("SN_CONCLUIDA")
                        .HasComment("Flag que indica se o usuário concluiu (1) a aula.");

                    b.HasKey("CdUsuarioAula");

                    b.HasIndex("CdAula");

                    b.HasIndex("CdUsuario");

                    b.ToTable("USUARIO_AULA", null, t =>
                        {
                            t.HasComment("Tabela de associação que registra o progresso de um usuário em um curso.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioLoginMOD", b =>
                {
                    b.Property<int>("CdLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_LOGIN")
                        .HasComment("Código único do registro de login. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdLogin"));

                    b.Property<int>("CdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("CD_USUARIO")
                        .HasComment("FK para a tabela USUARIO, estabelecendo a relação um-para-um.");

                    b.Property<DateTime?>("DtAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_ALTERACAO")
                        .HasComment("Data da última alteração do registro (ex: troca de senha).");

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_CADASTRO")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Data de criação do registro.");

                    b.Property<DateTime?>("DtValidadeToken")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_VALIDADE_TOKEN")
                        .HasComment("Data e hora em que o token de recuperação de senha expira.");

                    b.Property<string>("TxSenhaHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TX_SENHA_HASH")
                        .HasComment("Senha do usuário armazenada em formato hash.");

                    b.Property<string>("TxTokenRecuperacao")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TX_TOKEN_RECUPERACAO")
                        .HasComment("Token gerado para o processo de recuperação de senha.");

                    b.HasKey("CdLogin");

                    b.HasIndex("CdUsuario");

                    b.ToTable("usuario_login", null, t =>
                        {
                            t.HasComment("Armazena as credenciais de acesso e informações de segurança do usuário.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioMOD", b =>
                {
                    b.Property<int>("CdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_USUARIO")
                        .HasComment("Código único do usuário. PK.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdUsuario"));

                    b.Property<int>("CdTipoUsuario")
                        .HasColumnType("int")
                        .HasColumnName("CD_TIPO_USUARIO")
                        .HasComment("FK para a tabela USUARIO_TIPO.");

                    b.Property<DateTime?>("DtAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("DT_ALTERACAO")
                        .HasComment("Data da última alteração do registro.");

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DT_CADASTRO")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Data de criação do registro.");

                    b.Property<string>("NoUsuario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NO_USUARIO")
                        .HasComment("Nome completo do usuário.");

                    b.Property<bool>("SnAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("SN_ATIVO")
                        .HasComment("Flag que indica se o usuário está ativo (1) ou inativo (0).");

                    b.Property<string>("TxEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TX_EMAIL")
                        .HasComment("Email do usuário. Deve ser único.");

                    b.Property<string>("TxTelefone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TX_TELEFONE")
                        .HasComment("Telefone de contato do usuário.");

                    b.HasKey("CdUsuario");

                    b.HasIndex("CdTipoUsuario");

                    b.ToTable("usuarios", null, t =>
                        {
                            t.HasComment("Armazena os dados cadastrais de todos os usuários da plataforma.");
                        });
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioTipoMOD", b =>
                {
                    b.Property<int>("CdTipoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CD_TIPO_USUARIO");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CdTipoUsuario"));

                    b.Property<string>("NoTipoUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NO_TIPO_USUARIO");

                    b.HasKey("CdTipoUsuario");

                    b.ToTable("USUARIO_TIPO", (string)null);
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AfiliadoMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.UsuarioMOD", "CdUsuarioNavigation")
                        .WithMany("Afiliados")
                        .HasForeignKey("CdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_AFILIADO_USUARIO");

                    b.Navigation("CdUsuarioNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AfiliadoPaginaMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.AfiliadoMOD", "CdAfiliadoNavigation")
                        .WithMany("AfiliadoPaginas")
                        .HasForeignKey("CdAfiliado")
                        .IsRequired()
                        .HasConstraintName("FK_PAGINA_AFILIADO");

                    b.Navigation("CdAfiliadoNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AulaAnexoMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.AulaMOD", "CdAulaNavigation")
                        .WithMany("AulaAnexos")
                        .HasForeignKey("CdAula")
                        .IsRequired()
                        .HasConstraintName("FK_ANEXO_AULA");

                    b.Navigation("CdAulaNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AulaMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.ModuloMOD", "CdModuloNavigation")
                        .WithMany("Aulas")
                        .HasForeignKey("CdModulo")
                        .IsRequired()
                        .HasConstraintName("FK_AULA_MODULO");

                    b.Navigation("CdModuloNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.BankflowTransacaoMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.PedidoMOD", "CdPedidoNavigation")
                        .WithMany("BankflowTransacaos")
                        .HasForeignKey("CdPedido")
                        .IsRequired()
                        .HasConstraintName("FK_TRANSACAO_PEDIDO");

                    b.HasOne("BrainFlow.Data.Models.BankflowTransacaoTipoMOD", "CdTipoTransacaoNavigation")
                        .WithMany("BankflowTransacaos")
                        .HasForeignKey("CdTipoTransacao")
                        .IsRequired()
                        .HasConstraintName("FK_TRANSACAO_TIPO");

                    b.Navigation("CdPedidoNavigation");

                    b.Navigation("CdTipoTransacaoNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.ComissaoMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.AfiliadoMOD", "CdAfiliadoNavigation")
                        .WithMany("Comissaos")
                        .HasForeignKey("CdAfiliado")
                        .IsRequired()
                        .HasConstraintName("FK_COMISSAO_AFILIADO");

                    b.HasOne("BrainFlow.Data.Models.PedidoItemMOD", "CdPedidoItemNavigation")
                        .WithMany("Comissaos")
                        .HasForeignKey("CdPedidoItem")
                        .IsRequired()
                        .HasConstraintName("FK_COMISSAO_PEDIDOITEM");

                    b.Navigation("CdAfiliadoNavigation");

                    b.Navigation("CdPedidoItemNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.CursoMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.AfiliadoMOD", "CdAfiliadoNavigation")
                        .WithMany("Cursos")
                        .HasForeignKey("CdAfiliado")
                        .IsRequired()
                        .HasConstraintName("FK_CURSO_AFILIADO");

                    b.Navigation("CdAfiliadoNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.ModuloMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.CursoMOD", "CdCursoNavigation")
                        .WithMany("Modulos")
                        .HasForeignKey("CdCurso")
                        .IsRequired()
                        .HasConstraintName("FK_MODULO_CURSO");

                    b.Navigation("CdCursoNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.PedidoItemMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.CursoMOD", "CdCursoNavigation")
                        .WithMany("PedidoItems")
                        .HasForeignKey("CdCurso")
                        .IsRequired()
                        .HasConstraintName("FK_PEDIDOITEM_CURSO");

                    b.HasOne("BrainFlow.Data.Models.PedidoMOD", "CdPedidoNavigation")
                        .WithMany("PedidoItems")
                        .HasForeignKey("CdPedido")
                        .IsRequired()
                        .HasConstraintName("FK_PEDIDOITEM_PEDIDO");

                    b.Navigation("CdCursoNavigation");

                    b.Navigation("CdPedidoNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.PedidoMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.UsuarioMOD", "CdUsuarioNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("CdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_PEDIDO_USUARIO");

                    b.Navigation("CdUsuarioNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioAulaMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.AulaMOD", "CdAulaNavigation")
                        .WithMany("UsuarioAulas")
                        .HasForeignKey("CdAula")
                        .IsRequired()
                        .HasConstraintName("FK_USUARIOAULA_AULA");

                    b.HasOne("BrainFlow.Data.Models.UsuarioMOD", "CdUsuarioNavigation")
                        .WithMany("UsuarioAulas")
                        .HasForeignKey("CdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_USUARIOAULA_USUARIO");

                    b.Navigation("CdAulaNavigation");

                    b.Navigation("CdUsuarioNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioLoginMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.UsuarioMOD", "CdUsuarioNavigation")
                        .WithMany("UsuarioLogins")
                        .HasForeignKey("CdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_LOGIN_USUARIO");

                    b.Navigation("CdUsuarioNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioMOD", b =>
                {
                    b.HasOne("BrainFlow.Data.Models.UsuarioTipoMOD", "CdTipoUsuarioNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("CdTipoUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_USUARIO_TIPO");

                    b.Navigation("CdTipoUsuarioNavigation");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AfiliadoMOD", b =>
                {
                    b.Navigation("AfiliadoPaginas");

                    b.Navigation("Comissaos");

                    b.Navigation("Cursos");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.AulaMOD", b =>
                {
                    b.Navigation("AulaAnexos");

                    b.Navigation("UsuarioAulas");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.BankflowTransacaoTipoMOD", b =>
                {
                    b.Navigation("BankflowTransacaos");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.CursoMOD", b =>
                {
                    b.Navigation("Modulos");

                    b.Navigation("PedidoItems");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.ModuloMOD", b =>
                {
                    b.Navigation("Aulas");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.PedidoItemMOD", b =>
                {
                    b.Navigation("Comissaos");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.PedidoMOD", b =>
                {
                    b.Navigation("BankflowTransacaos");

                    b.Navigation("PedidoItems");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioMOD", b =>
                {
                    b.Navigation("Afiliados");

                    b.Navigation("Pedidos");

                    b.Navigation("UsuarioAulas");

                    b.Navigation("UsuarioLogins");
                });

            modelBuilder.Entity("BrainFlow.Data.Models.UsuarioTipoMOD", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
